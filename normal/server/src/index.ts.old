import "reflect-metadata";
import "dotenv-safe/config";
import express from "express";
import { createConnection } from "typeorm";
import { ApolloServer } from "apollo-server-express";
import { buildSchema } from "type-graphql";
import { User } from "./entities/User";
import { UserResolver } from "./resolvers/UserResolver";
import { Client } from "./entities/Client";
import { ClientResolver } from "./resolvers/ClientResolver";
import { __port__, __prod__ } from "./constants";


const main = async () => {
    await createConnection({
        type: 'postgres',
        database: 'system',
        username: 'postgres',
        password: 'postgres',
        logging: !__prod__,
        synchronize: false,
        entities: [User, Client]
    });

    const app = express();

    const apolloServer = new ApolloServer({
        schema: await buildSchema({
            resolvers: [UserResolver, ClientResolver],
            //globalMiddlewares: [GlobalErrorHandlerMiddleware]
        }),
        context: ({ req, res }) => ({ req, res }),
    });

    apolloServer.applyMiddleware({ app });

    app.listen(__port__, () => {
        console.log('server started');
    })
};

main()
    .catch(err => {
        console.log(err);
    })
